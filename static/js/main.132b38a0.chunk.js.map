{"version":3,"sources":["components/Button/index.js","pages/Home/index.js","pages/Error/index.js","core/App.js","serviceWorker.js","index.js"],"names":["Button","children","content","onClick","variant","className","cx","Home","React","useState","toggled","setToggled","handleClick","Error","App","language","setLanguage","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gRAYeA,EARA,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,SAAUC,EAAgC,EAAhCA,QAASC,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,QAE1C,OAAO,yBAAKC,UAAWC,IAAG,SAAUF,GAAUD,QAASA,GAClDF,GAAYC,EACb,kBAAC,IAAD,QCcOK,EAnBF,WAAO,IAAD,EACeC,IAAMC,UAAS,GAD9B,mBACRC,EADQ,KACCC,EADD,KAGTC,EAAc,WAChBD,GAAYD,IAGhB,OAAO,6BACH,oCACA,kBAAC,EAAD,CAAQN,QAAQ,YAAYD,QAASS,GAArC,UAEA,kBAAC,EAAD,CAAQR,QAAQ,WAAWD,QAASS,GAApC,UAEA,kBAAC,EAAD,CAAQR,QAAQ,OAAOD,QAASS,GAAhC,WACa,IAAZF,EAAmB,8CAAyB,OCXtCG,EAJD,WACV,OAAO,uC,iBCoBIC,MAjBf,WAAgB,IAAD,EACmBN,IAAMC,SAAS,SADlC,mBACNM,EADM,KACIC,EADJ,KAGb,OACE,yBAAKX,UAAU,OACb,kBAAC,IAAD,CAAiBU,SAAUA,EAAUC,YAAaA,GAChD,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWZ,IACjC,kBAAC,IAAD,CAAOY,UAAWN,SCHVO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.132b38a0.chunk.js","sourcesContent":["import React from \"react\";\nimport cx from \"classnames\";\nimport Ink from 'react-ink';\n\nconst Button = ({ children, content, onClick, variant }) => {\n\n    return <div className={cx(\"button\", variant)} onClick={onClick}>\n        {children || content}\n        <Ink />\n    </div>\n}\n\nexport default Button;\n","import React from 'react';\nimport Button from '../../components/Button'\n\nconst Home = () => {\n    const [toggled, setToggled] = React.useState(false);\n\n    const handleClick = () => {\n        setToggled(!toggled);\n    }\n\n    return <div>\n        <h1>Home</h1>\n        <Button variant=\"contained\" onClick={handleClick}>Button</Button>\n        \n        <Button variant=\"outlined\" onClick={handleClick}>Button</Button>\n\n        <Button variant=\"text\" onClick={handleClick}>Button</Button>\n        {toggled === true ? <p>You can see mee</p> : null}\n    </div>\n    \n}\n\nexport default Home;","import React from 'react';\n\nconst Error = () => {\n    return <div>Error</div>\n}\n\nexport default Error;","import React from 'react';\nimport {BrowserRouter as Router, Switch, Route} from \"react-router-dom\";\nimport Home from '../pages/Home';\nimport Error from '../pages/Error';\nimport LitteraProvider from \"react-littera\";\n\nfunction App() {\n  const [language, setLanguage] = React.useState(\"en_US\");\n\n  return (\n    <div className=\"App\">\n      <LitteraProvider language={language} setLanguage={setLanguage}>\n        <Router>\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route component={Error} />\n          </Switch>\n        </Router>\n      </LitteraProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './core/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}